# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: mattberserk

service: bannerService

provider:
  name: aws
  runtime: nodejs22.x
  environment:
    BUCKET_NAME: banner-images-matt-lino-dev-123-new
    DYNAMO_TABLE: Banners
  iamRoleStatements:
    - Effect: Allow #Grants permission
      Action:
        - s3:PutObject #needed to generate the pre-signed url for uploading the file
      Resource: arn:aws:s3:::banner-images-matt-lino-dev-123-new/*
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:us-east-1:958313499473:table/Banners
resources:
  Resources:
    #//this section defines the AWS resources that will be created as part of the deployment
    BannerImagesBucket:
      Type: AWS::S3::Bucket #Specifies that the resource is an s3 bucket
      Properties:
        BucketName: banner-images-matt-lino-dev-123-new #the unique name of the s3 bucket

    #DynamoDB Table Configuration
    BannersTable:
      Type: AWS::DynamoDB::Table #specifies that the resource is a  DynamoDB table
      Properties:
        TableName: Banners
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: fileName
            AttributeType: S
        KeySchema:
          - AttributeName: fileName
            KeyType: HASH

functions:
  getUploadUrl:
    handler: handlers/uploadBanner.getUploadUrl
    events:
      - httpApi:
          path: /upload-url
          method: post

  confirmUpload:
    handler: handlers/confirmUpload.confirmUpload
    events: #Defines the even triggers for this  function
      - s3: #specifies an s3 event trigger
          bucket: banner-images-matt-lino-dev-123-new
          event: s3:ObjectCreated:Put #the function  is triggered
          #when a new object is uploaded (Put event ) to the s3 bucket
          existing: true #ensures  the function listens to events
          #for already existing objects in the bucket
